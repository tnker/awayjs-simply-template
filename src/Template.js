/*

template class

*/
// awayjs-core
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
// awayjs-display
var View = require("awayjs-display/lib/containers/View");
var PrimitivePlanePrefab = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
// awayjs-methodmaterials
var MethodMaterial = require("awayjs-methodmaterials/lib/MethodMaterial");
var MethodRendererPool = require("awayjs-methodmaterials/lib/pool/MethodRendererPool");
// awayjs-renderergl
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var Template = (function () {
    function Template() {
        var _this = this;
        // view setup
        this._view = new View(new DefaultRenderer(MethodRendererPool));
        // view setting
        this._view.camera.z = -1000;
        this._view.camera.y = 500;
        this._view.camera.lookAt(new Vector3D());
        // material setup
        this._planeMaterial = new MethodMaterial();
        // scene setup
        this._plane = new PrimitivePlanePrefab(700, 700).getNewObject();
        this._plane.material = this._planeMaterial;
        this._view.scene.addChild(this._plane);
        // bind resize
        window.onresize = function (event) { return _this.onResize(event); };
        this.onResize();
        // enterframe start
        this._timer = new RequestAnimationFrame(this.onEnterFrame, this);
        this._timer.start();
    }
    Template.prototype.onEnterFrame = function (dt) {
        this._plane.rotationY += 1;
        this._view.render();
    };
    Template.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.x = 0;
        this._view.y = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return Template;
})();
window.onload = function () {
    new Template();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9UZW1wbGF0ZS50cyJdLCJuYW1lcyI6WyJUZW1wbGF0ZSIsIlRlbXBsYXRlLmNvbnN0cnVjdG9yIiwiVGVtcGxhdGUub25FbnRlckZyYW1lIiwiVGVtcGxhdGUub25SZXNpemUiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUU7QUFFRixBQUNBLGNBRGM7QUFDZCxJQUFPLFFBQVEsV0FBdUIsK0JBQStCLENBQUMsQ0FBQztBQUN2RSxJQUFPLHFCQUFxQixXQUFVLDZDQUE2QyxDQUFDLENBQUM7QUFDckYsQUFDQSxpQkFEaUI7QUFDakIsSUFBTyxJQUFJLFdBQTJCLG9DQUFvQyxDQUFDLENBQUM7QUFFNUUsSUFBTyxvQkFBb0IsV0FBVyxpREFBaUQsQ0FBQyxDQUFDO0FBQ3pGLEFBQ0EseUJBRHlCO0FBQ3pCLElBQU8sY0FBYyxXQUFpQiwyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25GLElBQU8sa0JBQWtCLFdBQWEsb0RBQW9ELENBQUMsQ0FBQztBQUM1RixBQUNBLG9CQURvQjtBQUNwQixJQUFPLGVBQWUsV0FBZ0IsdUNBQXVDLENBQUMsQ0FBQztBQUUvRSxJQUFNLFFBQVE7SUFVVkEsU0FWRUEsUUFBUUE7UUFBZEMsaUJBOENDQTtRQWxDT0EsQUFDQUEsYUFEYUE7UUFDYkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsZUFBZUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMvREEsQUFDQUEsZUFEZUE7UUFDZkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxRQUFRQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN6Q0EsQUFDQUEsaUJBRGlCQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDM0NBLEFBQ0FBLGNBRGNBO1FBQ2RBLElBQUlBLENBQUNBLE1BQU1BLEdBQVVBLElBQUlBLG9CQUFvQkEsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDdkVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN2Q0EsQUFDQUEsY0FEY0E7UUFDZEEsTUFBTUEsQ0FBQ0EsUUFBUUEsR0FBR0EsVUFBQ0EsS0FBY0EsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBcEJBLENBQW9CQSxDQUFDQTtRQUMzREEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7UUFDaEJBLEFBQ0FBLG1CQURtQkE7UUFDbkJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDakVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO0lBQ3hCQSxDQUFDQTtJQUVPRCwrQkFBWUEsR0FBcEJBLFVBQXFCQSxFQUFVQTtRQUUzQkUsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO0lBQ3hCQSxDQUFDQTtJQUVPRiwyQkFBUUEsR0FBaEJBLFVBQWlCQSxLQUFxQkE7UUFBckJHLHFCQUFxQkEsR0FBckJBLFlBQXFCQTtRQUVsQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUNyQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDM0NBLENBQUNBO0lBRUxILGVBQUNBO0FBQURBLENBOUNBLEFBOENDQSxJQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sR0FBRztJQUVaLElBQUksUUFBUSxFQUFFLENBQUM7QUFDbkIsQ0FBQyxDQUFBIiwiZmlsZSI6IlRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxudGVtcGxhdGUgY2xhc3NcblxuKi9cblxuLy8gYXdheWpzLWNvcmVcbmltcG9ydCBWZWN0b3IzRCAgICAgICAgICAgICA9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBSZXF1ZXN0QW5pbWF0aW9uRnJhbWU9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIpO1xuLy8gYXdheWpzLWRpc3BsYXlcbmltcG9ydCBWaWV3ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9WaWV3XCIpO1xuaW1wb3J0IE1lc2ggICAgICAgICAgICAgICAgID0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9NZXNoXCIpO1xuaW1wb3J0IFByaW1pdGl2ZVBsYW5lUHJlZmFiID0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wcmVmYWJzL1ByaW1pdGl2ZVBsYW5lUHJlZmFiXCIpO1xuLy8gYXdheWpzLW1ldGhvZG1hdGVyaWFsc1xuaW1wb3J0IE1ldGhvZE1hdGVyaWFsICAgICAgID0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL01ldGhvZE1hdGVyaWFsXCIpO1xuaW1wb3J0IE1ldGhvZFJlbmRlcmVyUG9vbCAgID0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyZXJQb29sXCIpO1xuLy8gYXdheWpzLXJlbmRlcmVyZ2xcbmltcG9ydCBEZWZhdWx0UmVuZGVyZXIgICAgICA9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvRGVmYXVsdFJlbmRlcmVyXCIpO1xuXG5jbGFzcyBUZW1wbGF0ZVxue1xuICAgIHByaXZhdGUgX3ZpZXc6IFZpZXc7XG5cbiAgICBwcml2YXRlIF9wbGFuZU1hdGVyaWFsOiBNZXRob2RNYXRlcmlhbDtcblxuICAgIHByaXZhdGUgX3BsYW5lOiBNZXNoO1xuXG4gICAgcHJpdmF0ZSBfdGltZXI6IFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIC8vIHZpZXcgc2V0dXBcbiAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBWaWV3KG5ldyBEZWZhdWx0UmVuZGVyZXIoTWV0aG9kUmVuZGVyZXJQb29sKSk7XG4gICAgICAgIC8vIHZpZXcgc2V0dGluZ1xuICAgICAgICB0aGlzLl92aWV3LmNhbWVyYS56ID0gLTEwMDA7XG4gICAgICAgIHRoaXMuX3ZpZXcuY2FtZXJhLnkgPSA1MDA7XG4gICAgICAgIHRoaXMuX3ZpZXcuY2FtZXJhLmxvb2tBdChuZXcgVmVjdG9yM0QoKSk7XG4gICAgICAgIC8vIG1hdGVyaWFsIHNldHVwXG4gICAgICAgIHRoaXMuX3BsYW5lTWF0ZXJpYWwgPSBuZXcgTWV0aG9kTWF0ZXJpYWwoKTtcbiAgICAgICAgLy8gc2NlbmUgc2V0dXBcbiAgICAgICAgdGhpcy5fcGxhbmUgPSA8TWVzaD4gbmV3IFByaW1pdGl2ZVBsYW5lUHJlZmFiKDcwMCwgNzAwKS5nZXROZXdPYmplY3QoKTtcbiAgICAgICAgdGhpcy5fcGxhbmUubWF0ZXJpYWwgPSB0aGlzLl9wbGFuZU1hdGVyaWFsO1xuICAgICAgICB0aGlzLl92aWV3LnNjZW5lLmFkZENoaWxkKHRoaXMuX3BsYW5lKTtcbiAgICAgICAgLy8gYmluZCByZXNpemVcbiAgICAgICAgd2luZG93Lm9ucmVzaXplID0gKGV2ZW50OiBVSUV2ZW50KSA9PiB0aGlzLm9uUmVzaXplKGV2ZW50KTtcbiAgICAgICAgdGhpcy5vblJlc2l6ZSgpO1xuICAgICAgICAvLyBlbnRlcmZyYW1lIHN0YXJ0XG4gICAgICAgIHRoaXMuX3RpbWVyID0gbmV3IFJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uRW50ZXJGcmFtZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuX3RpbWVyLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkVudGVyRnJhbWUoZHQ6IG51bWJlcik6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX3BsYW5lLnJvdGF0aW9uWSArPSAxO1xuICAgICAgICB0aGlzLl92aWV3LnJlbmRlcigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25SZXNpemUoZXZlbnQ6IFVJRXZlbnQgPSBudWxsKTogdm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fdmlldy54ID0gMDtcbiAgICAgICAgdGhpcy5fdmlldy55ID0gMDtcbiAgICAgICAgdGhpcy5fdmlldy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB0aGlzLl92aWV3LmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB9XG5cbn1cblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKClcbntcbiAgICBuZXcgVGVtcGxhdGUoKTtcbn1cbiJdfQ==